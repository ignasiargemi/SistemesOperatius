#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>

#include <sys/ipc.h>
#include <sys/sem.h>
#include <string.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <netinet/in.h>

#define MAXPENDING 21   /* numero maximo de connexiones simultaneas */ <- nose si posarho
#define BUFFSIZE 5

void err_sys(char *cadena) { perror(cadena); exit(1); }

void HandleClient(int sock) {
	char buffer[BUFFSIZE];
	int received = -1;

	/* Rebem el missatge */
	if ((received = recv(sock, buffer, BUFFSIZE, 0)) < 0) err_sys("error de recepcio");

	while (received > 0) {
		/* Enviem el echo */
		if (send(sock, buffer, received, 0) != received) err_sys("error escriptura");
	
		/* Queden datos per rebre */
	    	if ((received = recv(sock, buffer, BUFFSIZE, 0)) < 0) err_sys("error lectura addicional");
	}
	close(sock);
}

int main(int argc, char *argv[]) {

	int arbitrejugador1sock, arbitrejugador2sock;

	struct sockaddr_in echoarbitre, echojugador1, echojugador2; //cada cop q faig un bind() necesito un struct, podria nomes utiltzarne un

	if (argc != 2) err_sys("US: server <port>\n");	

	/* Creem socket TCP */
	if ((arbitrejugador1sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) err_sys("error creacion socjet");

	/* preparamos sockaddr_in */
	memset(&echoarbitre, 0, sizeof(echoarbitre));       /* borra memoria */
	echoarbitre.sin_family = AF_INET;                  /* Internet/IP */
	echoarbitre.sin_addr.s_addr = htonl(INADDR_ANY);   /* cualquier addr */
	echoarbitre.sin_port = htons(atoi(argv[1]));       /* server port */

	/* Bind  */ //puc fer 2 bind --> s'ha de decidir
	if (bind(serversock, (struct sockaddr *) &echoarbitre,sizeof(echoarbitre)) < 0) err_sys("error bind");

	/* Listen  */
	if (listen(serversock, MAXPENDING) < 0) err_sys("error listen");

	//int socket (int domain, int type, int protocol);
	/*int bind(int fd, struct sockaddr *my_addr,int addrlen);

	server.sin_port = 0;                 /* bind() elegirá un puerto aleatoriamente
  server.sin_addr.s_addr = INADDR_ANY; /* pone la Ip del seridor automáticamente  */
  
	//int connect(int fd, struct sockaddr *serv_addr, int addrlen);
	//int listen(int fd,int backlog); 

	int jug1, jug2;	
	int jugador1=0;
	int jugador2=0;
	int suma1, tirada1;
	int suma2, tirada2;

	printf("Inicialitzat\n");
	//sem_wait(JA1);
	printf("Jugador 1 a punt\n");
	jug1 = open("jugador1.txt", O_WRONLY|O_TRUNC, 0644);

	//sem_wait(JA2);
	printf("Jugador 2 a punt\n");
	jug2 = open("jugador2.txt", O_WRONLY|O_TRUNC, 0644);

	write(jug1, &jugador1, sizeof(jugador1));
	write(jug1, &jugador2, sizeof(jugador2));
	
	write(jug2, &jugador1, sizeof(jugador1));
	write(jug2, &jugador2, sizeof(jugador2));

	close(jug1);
	close(jug2);
	
	/*sem_post(AJ1);
	sem_post(AJ2);*/

	while (1) {
		printf("El marcador és de %i a %i\n",jugador1,jugador2);

		if (jugador1 >= 3 || jugador2 >= 3) break;
		jug1 = open("jugador1.txt", O_RDONLY, 0);
	  	jug2 = open("jugador2.txt", O_RDONLY, 0);

		//sem_wait(JA1);

		//Read
		read(jug1, &tirada1, sizeof(tirada1));
		read(jug1, &suma1, sizeof(suma1));

		printf("Jugador 1: %i - %i\n", tirada1,suma1);
		//sem_wait(JA2);
		
		//Read
		read(jug2, &tirada2, sizeof(tirada2));
		read(jug2, &suma2, sizeof(suma2));

		printf("Jugador 2: %i - %i\n", tirada2,suma2);

		if ((tirada1+tirada2) == suma1) ++jugador1;
		if ((tirada1+tirada2) == suma2) ++jugador2;

    		jug1 = open("jugador1.txt", O_WRONLY, 0644);
    		jug2 = open("jugador2.txt", O_WRONLY, 0644);

		write(jug1, &jugador1, sizeof(jugador1));
		write(jug1, &jugador2, sizeof(jugador2));
		write(jug2, &jugador1, sizeof(jugador1));
		write(jug2, &jugador2, sizeof(jugador2));

		close(jug1);
  	close(jug2);

  	/*sem_post(AJ1);
  	sem_post(AJ2);*/
	}

	//Enunci del guanyador
	if (jugador1 == 3 && jugador2 == 3) printf("Hi ha hagut un empat!\n");
	else if (jugador1 > jugador2) printf("Ha guanyat el jugador 1!\n");
	else printf("Ha guanyat el jugador 2!\n");

	//Close
	/*if (sem_close(AJ1)!=0) err_sys("error eliminacio semafor");
	if (sem_close(AJ2)!=0) err_sys("error eliminacio semafor");
	if (sem_close(JA1)!=0) err_sys("error eliminacio semafor");
	if (sem_close(JA2)!=0) err_sys("error eliminacio semafor");*/

	printf("Final de l'arbitre!\n");
	exit(0);

}
